#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>
#
#TODO: Check if packages are already installed

if [ ! $(id -u) -eq 0 ]; then
	echo "This program must be run as root.";
	exit 0;
fi

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

#Title at the top of the dialog windows
BACKTITLE="XBian $(cat /etc/xbian_version)";

#Debugging mode, when enable no actual changes are made to the system
DEBUG=0;

#Check if a reboot is needed
ASKFORREBOOT=0;

#Check if the package database needs to be updates
#PACKAGEDBUPDATED=0;

#Standard delimiter
ORIGINALIFS=$IFS;

#Url for the main APT repository Package location
#APTBASE="http://apt.xbian.org/dists/wheezy/main/binary-armhf/"

#Location of the xbian-config script files
BASEPATH="/usr/local/include/xbian-config1"

#Current dialog title
TITLE="Config"

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

#Common xbian-config functions
source $BASEPATH/functions/packages

#Pre-requirements
source $BASEPATH/prereqs

#Standard dialogs
source $BASEPATH/functions/dialogs

#Text markup
source $BASEPATH/functions/markup

#System functions
source $BASEPATH/functions/system

#|------------------------------------|
#|           Main program             |
#|------------------------------------|
function showMainCloseDlg() {

	DOREBOOT=0;

	#Is a reboot needed for the changes to get effect
	if [ $ASKFORREBOOT -eq 1 ]; then
		wrapTxtFn "A reboot is required. Do you want to reboot now?"
		centerTxtFn "$WRAPPEDTXT"
		showConfirmDlg "Reboot?" "$CENTEREDTXT";
	
		# 0 = Do reboot
		# 1 = Don't reboot
		case "$?" in
			0)
				DOREBOOT=1;
			;;
		esac
	fi
	# Clear FS and MEM caches
	if [ $DEBUG -eq 0 ]; then
		clrFSCacheFn;
	fi
	clrMemCacheFn;
	if [ $DOREBOOT -eq 1 ]; then
		reboot
	fi;
	exit 0
}

function showMainMenuDlg() {
	ITEMS="";
	LEVEL="";
	ADD=".";
	CPATH="Config";
	
	# Do different things depending on which level we are
	if [ $1 -gt 0 ]; then
		# Show descendant
		LEVEL="$2";
		ADD=".";
	fi

	# Prepare path
	if [ $# -gt 2 ]; then
		CPATH=$3;
	fi
	
	#Trim CPATH
	trimLnFn $CPATH
	CPATH=$TRIMMEDLN;

	#Draw showMainMenuDlg
	IFS=$'\n';
	
	#Get all sub-items that corresponding to the level we are currently
	ITEMS=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL$ADD[0-9])*: | sed 's/\(.*\)\.\(\.*[0-9].\)\{1,\}/\2/' | sed 's/\([0-9]\)\(:\)\([a-zA-Z0-9\ \ %,-\"\*]\{1,\}\)\(:\)\([a-zA-Z0-9\ %,-\"\*]\{1,\}\)\(:\)/\1%\3!-!"\5"%:/' | cut -f1 -d: | sed ':a;N;$!ba;s/\n//g' | awk '{print substr($0,0,length)}');

	#Clear caches need by previous function
	clrMemCacheFn;
	
	#Create main menu
	
	#If a certain menu items has no subitems, than we've reach of final function we want to execute
	if [ -z "$ITEMS" ]; then
		#Grab the line of the module we want to execute
		LINE=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL | awk '{print substr($0,0,length)}'):);
		
		#Grab the system name of the module we want to execute
		MODULE=$(echo $LINE | rev | cut -f1 -d: | rev);
		
		#Grab the verbose name of the current module
		CLEVEL=$(echo $LINE | rev | cut -f3 -d: | rev | sed 's/\ *$//g');

		#Include the module we want to execute
		source $BASEPATH/scripts/$MODULE/main
		
		#Change the dialog title to reflect the right module
		TITLE="${CPATH% > *} > $CLEVEL"
		
		#Open the modules gui function
		showGUIFn;
		
		#When we're done, show the main menu again
		IFS=$'\n';
		showMainMenuDlg $(($1-1)) $(echo $LEVEL | awk '{print substr($0,0,length-1)}') ${CPATH% > *};
	else
		IFS="%";
		#Set the title to the appropriate menu level we're in
		TITLE=$CPATH

		#Show the main menu
		showMenuDlg "" "$ITEMS" 6;
		
		#What there a button pressed?
		# 1 = Button
		# 0 = Item
		if [ $? -eq 1 ]; then
			#Which button was pressed?
			# 0 = Close
			# 1 = Select
			if [ $1 -eq 0 ]; then
				showMainCloseDlg;
			else
				IFS=$'\n';
				showMainMenuDlg $(($1-1)) $(echo $LEVEL | awk '{print substr($0,0,length-1)}') ${CPATH% > *};
			fi
		else
			IFS=$'\n';
			showMainMenuDlg $(($1+1)) $LEVEL$RETURN$ADD  "$CPATH > $(cat $BASEPATH/struct | grep ^$(echo $LEVEL$RETURN)*: | cut -f2 -d: | sed 's/\ *$//g')";
		fi;
	fi;

}

#Check xbian-config was opened using arguments
if [[ $# -gt 0 ]]; then
	MODULE=$1;
	if [ -f $BASEPATH/scripts/$MODULE/main ]; then
		source $BASEPATH/scripts/$MODULE/main
		shift;
		#If the module was called with arguments
		if [ $# -gt 0 ]; then
			#Check if it's a valid argument
			if [ $(echo ${ARGUMENTS[@]} | grep $1 | wc -l) -eq 0 ]; then
				echo "Available arguments for module '$MODULE' are:";
				echo ${ARGUMENTS[@]};
			else
				cmdline "$@";
				echo $?;
			fi
		else
			echo "Available arguments for module '$MODULE' are:";
			echo ${ARGUMENTS[@]};
		fi
	fi
else
	#Run script inside screen, so it's doesn't fill the whole terminal history
	#SCREEN=$(screen -r | grep "Attached" | wc -l);
	#if [ $SCREEN -eq 0 ]; then
	#	`screen $0`
	#else
		showMainMenuDlg 0 "";
	#fi
fi
