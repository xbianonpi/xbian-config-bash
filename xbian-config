#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>
#

if [ ! $(id -u) -eq 0 ]; then
	echo "This program must be run as root.";
	exit 0;
fi

trap '' 2 20

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

# Title at the top of the dialog windows
BACKTITLE="XBian $(cat /etc/xbian_version)";

# Debugging mode, when enable no actual changes are made to the system
DEBUG=0;

# Check if a reboot is needed
ASKFORREBOOT=0;

# Check if the package database needs to be updates
LOCALPKGDBUPDATED=0;
REMOTEPKGDBUPDATED=0;
APTUPDATELISTUPDATED=0;

# Standard delimiter
ORIGINALIFS=$IFS;

# Url for the main APT repository Package location
APTBASE="http://apt.xbian.org/"

# Location of the xbian-config script files
BASEPATH="/usr/local/include/xbian-config"

#Set GUI language
LANGUAGE="en"

#|------------------------------------|
#|           Main program             |
#|------------------------------------|	
function showMainCloseDlg() {

	DOREBOOT=0;

	# Is a reboot needed for the changes to get effect
	if [ $ASKFORREBOOT -eq 1 ]; then
		wrapTxtFn "$_REBOOTREQUIRED"
		centerTxtFn "$WRAPPEDTXT"
		valignTxtFn "$CENTEREDTXT"
		showConfirmDlg "$ALIGNEDTXT";
	
		# 0: Do reboot
		# 1: Don't reboot
		case "$?" in
			0)
				DOREBOOT=1;
			;;
		esac
	fi
	# Clear FS and MEM caches
	if [ $DEBUG -eq 0 ]; then
		clrFSCacheFn;
	fi
	clrMemCacheFn;
	if [ $DOREBOOT -eq 1 ]; then
		reboot
	fi;
	exit 0
}

function showMainMenuDlg() {
	ITEMS="";
	LEVEL="";
	ADD=".";
	CPATH="Config";
	
	# Do different things depending on which level we are
	if [ $1 -gt 0 ]; then
		# Show descendant
		LEVEL="$2";
		ADD=".";
	fi

	# Prepare path
	if [ $# -gt 2 ]; then
		CPATH=$3;
	fi
	
	# Trim CPATH
	trimLnFn $CPATH
	CPATH=$TRIMMEDLN;

	# Draw showMainMenuDlg
	IFS=$'\n';
	
	# Get all sub-items that corresponding to the level we are currently
	ITEMS=$(grep "^$LEVEL$ADD[0-9]*:" $BASEPATH/struct | cut -f 2 -d:);

	# Clear caches need by previous function
	clrMemCacheFn;
	
	# Create main menu
	
	# If a certain menu items has no subitems, than we've reach of final function we want to execute
	if [ -z "$ITEMS" ]; then
		
		# Grab the system name of the module we want to execute
		SPECIFICLEVEL=${LEVEL:0:-1};
		MODULE=$(grep ^$SPECIFICLEVEL: $BASEPATH/struct | cut -f2 -d:);

		# Include the module we want to execute
		source $BASEPATH/modules/$MODULE/main
		if [ -f "$BASEPATH/modules/$MODULE/lang/$LANGUAGE" ]; then
			source $BASEPATH/modules/$MODULE/lang/$LANGUAGE
		else
			source $BASEPATH/modules/$MODULE/lang/en
		fi
		
		# Change the dialog title to reflect the right module
		TITLE="[${CPATH% > *} > $_NAME]"
		
		# Open the modules gui function
		showGUIFn;
		
		# When we're done, show the main menu again
		IFS=$'\n';
		showMainMenuDlg $(($1-1)) ${LEVEL:0:-2} ${CPATH% > *};
	else
		MENU="";
		I=1;
		for ITEM in ${ITEMS[@]}; do
			if [ -d $BASEPATH/modules/$ITEM ]; then
				if [ -f $BASEPATH/modules/$ITEM/lang/$LANGUAGE ]; then
					source $BASEPATH/modules/$ITEM/lang/$LANGUAGE
				else
					source $BASEPATH/modules/$ITEM/lang/en
				fi
				MENU+="$I%$_NAME!-!\"$_DESC\"%";
			else
				if [ -f $BASEPATH/lang/$LANGUAGE ]; then
					source $BASEPATH/lang/$LANGUAGE
				else
					source $BASEPATH/lang/en
				fi
			
			
				_NAME="_ITEM"${ITEM^^}"NAME";
				_DESC="_ITEM"${ITEM^^}"DESC";
				MENU+="$I%${!_NAME}!-!\"${!_DESC}\"%";
			fi
			I=$(($I+1));
		done;
		
		IFS="%";
		# Set the title to the appropriate menu level we're in
		TITLE="["$CPATH"]"
		if [ $(ps -A | grep $LOADER | wc -l) -gt 0 ]; then
			kill -9 $LOADER  > /dev/null 2>&1 &
			wait $! 2>/dev/null
		fi
		# Show the main menu

		if [ $1 -eq 0 ]; then
			showMenuDlg "" "$MENU" 7 11 $(($DEFAULTWIDTH+15)) $_SELECT $_EXIT
		else
			showMenuDlg "" "$MENU" 7
		fi
			
		# What there a button pressed?
		#  1: Button
		#  0: Item
		CODE=$?
		if [ $CODE -eq 1 ]; then
			# Which button was pressed?
			#  0: Close
			#  1: Select
			if [ $1 -eq 0 ]; then
				showMainCloseDlg;
			else
				IFS=$'\n';
				showMainMenuDlg $(($1-1)) ${LEVEL:0:-2} ${CPATH% > *};
			fi
		elif [ $CODE -eq 0 ]; then 
			IFS=$'\n';
			MODULE=$(grep "^$LEVEL$RETURN*:" $BASEPATH/struct | cut -f 2 -d:)
			
			if [ -d $BASEPATH/modules/$MODULE ]; then
				if [ -f $BASEPATH/modules/$MODULE/lang/$LANGUAGE ]; then
					source $BASEPATH/modules/$MODULE/lang/$LANGUAGE
				else
					source $BASEPATH/modules/$MODULE/lang/en
				fi
				showMainMenuDlg $(($1+1)) $LEVEL$RETURN$ADD  "$CPATH > $_NAME";
			else
				_NAME="_ITEM"${MODULE^^}"NAME";
				_DESC="_ITEM"${MODULE^^}"DESC";
				
				showMainMenuDlg $(($1+1)) $LEVEL$RETURN$ADD  "$CPATH > ${!_NAME}";
			fi
			
		fi;
	fi;
}


if [ $# -eq 0 ]; then
	#|------------------------------------|
	#|              GUI Mode              |
	#|------------------------------------|
	
	LOADER=0;
	while [ $(pgrep dialog | wc -l) -eq 0 ]; do 
		for a in \\ \| \/ -; do
			if [ $(pgrep dialog | wc -l) -eq 0 ]; then
				echo -n $a; 
				sleep 0.5; 
				echo -n -e \\r; 
			else
				break;
			fi
		done; 
	done &
	LOADER=$!

	#|------------------------------------|
	#|          Include files             |
	#|------------------------------------|

	# Main language
	if [ -f "$BASEPATH/lang/$LANGUAGE" ]; then
		source $BASEPATH/lang/$LANGUAGE
	else
		source $BASEPATH/lang/en;
	fi

	# Common xbian-config functions
	source $BASEPATH/functions/packages

	# Pre-requirements
	source $BASEPATH/prereqs

	# Standard dialogs
	source $BASEPATH/functions/dialogs

	# Text markup
	source $BASEPATH/functions/markup

	# System functions
	source $BASEPATH/functions/system

	# Language functions
	source $BASEPATH/functions/language
	
	#|------------------------------------|
	#|          Global variables          |
	#|------------------------------------|

	# Current dialog title
	TITLE="[$_TITLE]"

	# Retrieve user set language
	getLanguageFn;

	#Run script inside screen, so it's doesn't fill the whole terminal history
	#SCREEN=$(screen -r | grep "Attached" | wc -l);
	#if [ $SCREEN -eq 0 ]; then
	#	`screen $0`
	#else
		showMainMenuDlg 0 "";
	#fi
	
else
	#|------------------------------------|
	#|              CLI Mode              |
	#|------------------------------------|

	#|------------------------------------|
	#|          Include files             |
	#|------------------------------------|

	# System functions
	source $BASEPATH/functions/system
	clrMemCacheFn;
	# Check xbian-config was opened using arguments
	MODULE=$1;
	if [ $MODULE == "reboot" ]; then
		if [ -f /tmp/xbian-config-reboot ]; then
			cat /tmp/xbian-config-reboot;
		else
			echo 0;
		fi;
	elif [ -f $BASEPATH/modules/$MODULE/main ]; then
		source $BASEPATH/modules/$MODULE/main
		shift;
		# If the module was called with arguments
		if [ $# -gt 0 ]; then
			# Check if it's a valid argument
			if [ $(echo ${ARGUMENTS[@]} | grep $1 | wc -l) -eq 0 ]; then
				echo "Available arguments for module '$MODULE' are:";
				echo ${ARGUMENTS[@]};
			else
				# Quotation marks to preserve newlines
				echo "$(showCMDFn $@)";
			fi
		else
			echo "Available arguments for module '$MODULE' are:";
			echo ${ARGUMENTS[@]};
		fi
	fi
fi
