#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

function checkNeedToResizeSDFn() {
	PART_START=$(fdisk -l | grep mmcblk0p2 | awk '{print $2}');
	CPART_END=$(fdisk -l | grep mmcblk0p2 | awk '{print $3}');
	SDEND=$(fdisk -l | sed -n '/mmcblk0/{n;p;}' | head -1 | awk '{print $8}');
	SDEND=$(($SDEND-1));
	SWAP=$(fdisk -l | grep 'mmcblk0p3' | awk '{print $5}');
		
	if [ $SDEND -eq $CPART_END ]; then
		return 0;
	else
		return 1;
	fi
}

function checkNeedToResizePartFn() {
	IFS=".";
	SDSIZE=($(echo "$(fdisk -l | sed -ne 's/\(Disk\)\(.*\)\(,\)\(.*\)\([\ ]\)\([0-9]\{1,\}\)\([\ ]bytes\)\(.*\)/\6/p')/1024/1024/1000" | bc -l));
	if [[ ${SDSIZE[0]} =~ [0-9]{1,} ]] && [[ ${SDSIZE[1]} =~ [0-9]{1,} ]]; then
		if [ $(($(echo "(${SDSIZE[1]}/100000000000000000000) > 0" | bc -l))) -gt 0 ]; then
				SDSIZE=$((${SDSIZE[0]}+1));
		fi
	fi

	PARTSIZE=($(echo "$(df /root | awk '{print $2}' | tail -1)/1024/1000" | bc -l));
	if [[ ${PARTSIZE[0]} =~ [0-9]{1,} ]] && [[ ${PARTSIZE[1]} =~ [0-9]{1,} ]]; then
		if [ $(($(echo "(${PARTSIZE[1]}/100000000000000000000) > 0" | bc -l))) -gt 0 ]; then
				PARTSIZE=$((${PARTSIZE[0]}+1));
		fi
	fi
	if [[ $SDSIZE =~ [0-9]{1,} ]] && [[ $PARTSIZE =~ [0-9]{1,} ]]; then
		if [ $SDSIZE -eq $PARTSIZE ]; then
			return 0;
		else
			return 1;
		fi
	else
		return 0;
	fi
}

function resizeSDFn() {
	ERROR=0;
	
	checkNeedToResizeSDFn;
	if [ $? == 1 ]; then
		PART_START=$(fdisk -l | grep mmcblk0p2 | awk '{print $2}');
		CPART_START=$PART_START;
		CPART_END=$(fdisk -l | grep mmcblk0p2 | awk '{print $3}');
		SDEND=$(fdisk -l | sed -n '/mmcblk0/{n;p;}' | head -1 | awk '{print $8}');
		SDEND=$(($SDEND-1));
		SWAP=$(fdisk -l | grep 'mmcblk0p3' | awk '{print $5}');
		
		PART_END=$SDEND;
		
		if [ ! -z $SWAP ] && [ $SWAP -eq 82 ]; then
			swapoff -a
			ERROR=$?;
			if [ $ERROR -eq 0 ]; then
fdisk /dev/mmcblk0 2>/dev/null >/dev/null <<EOF
d
2
d
3
n
p
2
$PART_START
$PART_END
w
EOF
				ERROR=$?;
			else
				return 1;
			fi
			sed -i '/\/dev.*swap/d' /etc/fstab
		else
			if [ $ERROR -eq 0 ]; then
fdisk /dev/mmcblk0 2>/dev/null >/dev/null <<EOF
d
2
n
p
2
$PART_START
$PART_END
w
EOF
				ERROR=$?;
			else
				return 1;
			fi
		fi
	fi

	checkNeedToResizePartFn;
	if [ $? -eq 1 ]; then
		if [ $ERROR -eq 0 ]; then
		askForRebootFn;

cat <<\EOF > /etc/init.d/resize2fs_once
#!/bin/sh
### BEGIN INIT INFO
# Provides: resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once"
    resize2fs /dev/mmcblk0p2 >/dev/null
    rm /etc/init.d/resize2fs_once >/dev/null
    update-rc.d resize2fs_once remove >/dev/null
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
			ERROR=$?;
		fi
		if [ $ERROR -eq 0 ]; then
			chmod +x /etc/init.d/resize2fs_once >/dev/null;
			if [ $? -eq 0 ]; then
				ERROR=0;
			else
				ERROR=1;
			fi
		else
			ERROR=1;
		fi
		if [ $ERROR -eq 0 ]; then
			update-rc.d resize2fs_once defaults >/dev/null 2>/dev/null;
			if [ $? -eq 0 ]; then
				ERROR=0;
			else
				ERROR=1;
			fi
		else
			ERROR=1;
		fi
	return $ERROR;
	else
		return 1;
	fi
}