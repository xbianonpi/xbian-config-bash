#!/bin/bash
#
#Copyright 2012 Hexagon <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

# The arguments this module accepts
ARGUMENTS=(list status dhcp static credentials scan);

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

source $BASEPATH/modules/network/functions
source $BASEPATH/modules/network/dialogs

#|------------------------------------|
#|           Main program             |
#|------------------------------------|

# Executes the GUI version of this module
function showGUIFn() {
	# Notify user that interfaces are loading
	showInterfacesLoadingDlg

	# Fetch all available interfaces and prepare menu
	IFACES=($(listNetworkInterfacesFn))
	if [ ! -z "$IFACES" ]; then
		showInterfacesSelectDlg "$IFACES"
		if [ $? -eq 0 ]; then
			# Save selected interface to a variable
			IFACE=${IFACES[$(($RETURN-1))]}
			
			# Get current configuration
			IFACE_DATA=$(readNetworkConfigurationFn "$IFACE")

			# Get mode
			MODE=$(echo "$IFACE_DATA" | grep mode | cut -f 2 -d" ")

			# Show DHCP/Static selection
			showIPModeConfigDlg "$MODE"
			if [ $? -eq 0 ]; then
				# Set Static/DHCP Settings
				if [ $RETURN -eq 1 ]; then
					# DHCP Selected
					setInterfaceDhcpFn "$IFACE"
					#showInterfaceDhcpSuccessDlg
				else
					# Static IP Selected
					showInterfaceStaticGUIFn "$IFACE" "$IFACE_DATA"
				fi

				# If needed, ask for wireless credentials
				ISWLAN=$(echo -e "$IFACE" | grep wlan)
				if [ ! -z "$ISWLAN" ]; then
					showWlanCredentialsGUIFn "$IFACE" "$IFACE_DATA"
				fi

				# Configuration done
				showGUIFn
				return 0;
			else
				showGUIFn;
			fi
		fi
	else
		showNoInterfacesAvailableDlg
	fi
}

function showInterfaceStaticGUIFn() {
	IP=$(echo "$2" | grep ip | cut -f 2 -d" ")
	NETMASK=$(echo "$2" | grep netmask | cut -f 2 -d" ")
	GATEWAY=$(echo "$2" | grep gateway | cut -f 2 -d" ")
	NAMESERVER1=$(echo "$2" | grep nameserver1 | cut -f 2 -d" ")
	NAMESERVER2=$(echo "$2" | grep nameserver2 | cut -f 2 -d" ")
	showInterfaceStaticDlg "$IP" "$NETMASK" "$GATEWAY" "$NAMESERVER1" "$NAMESERVER2"
	if [ $? -eq 0 ]; then
		STATICCONF=($(echo -e "$RETURN"))
		if [ ${#STATICCONF[@]} -gt 2 ]; then
			IP="${STATICCONF[0]}"
			NETMASK="${STATICCONF[1]}"
			GATEWAY="${STATICCONF[2]}"
			NAMESERVER1=""
			NAMESERVER2=""
			if [ ${#STATICCONF[@]} -gt 3 ]; then
				NAMESERVER1="${STATICCONF[3]}"
			fi
			if [ ${#STATICCONF[@]} -gt 4 ]; then
				NAMESERVER2="${STATICCONF[4]}"
			fi
			# Validation of arguments is done inside this function
			RESULT=$(setInterfaceStaticFn "$1" "$IP" "$NETMASK" "$GATEWAY" "$NAMESERVER1" "$NAMESERVER2")
			if [ $RESULT -eq 1 ]; then
				showInterfaceStaticSuccessDlg
			else
				showInterfaceStaticErrorDlg
				showInterfaceStaticGUIFn "$1" "$2"
				return 0;
			fi
		else
			showInterfaceStaticErrorDlg
			showInterfaceStaticGUIFn "$1" "$2"
			return 0;
		fi
	fi
}

function showWlanCredentialsGUIFn() {

	SSID=$(echo -e "$2" | grep ssid | cut -f 2 -d" ")
	WLANKEY=$(echo -e "$2" | grep key | cut -f 2 -d" ")
	PROTECTION=$(echo "$2" | grep protection | cut -f 2 -d" ")

	showScanForWLANDlg;

	if [ $? -eq 0 ]; then
		if [ $RETURN -eq 2 ]; then
			showWlanModeConfigDlg "$PROTECTION"
			if [ $? -eq 0 ]; then
				PROTECTION="$RETURN"
				# WPA and WEP need both ssid and key
				if [ $PROTECTION -lt 3 ]; then
					showInterfaceCredentialsDlg "$SSID" "$WLANKEY"
					if [ $? -eq 0 ]; then
						CREDENTIALS=($(echo -e "$RETURN"))
						if [ ${#CREDENTIALS[@]} -eq 2 ];then
							SSID=${CREDENTIALS[0]}
							WLANKEY=${CREDENTIALS[1]}
							if [ $PROTECTION -eq 1 ]; then
								setInterfaceWlanCredentials "$1" "WPA" "$SSID" "$WLANKEY"
							else
								setInterfaceWlanCredentials "$1" "WEP" "$SSID" "$WLANKEY"
							fi
							showInterfaceCredentialsSuccessDlg
						else
							showInterfaceCredentialsErrorDlg
							showWlanCredentialsGUIFn "$1" "$2"
							return 0;
						fi
						return 0;
					fi
				# Open network need only ssh, hence different dialog here
				else
					SSID=$(echo -e "$2" | grep ssid | cut -f 2 -d" ")
					showInterfaceSSIDDlg "$SSID"
					if [ $? -eq 0 ]; then
						if [ ! -z "$RETURN" ]; then
							setInterfaceWlanCredentials "$1" "Open" "$RETURN"
							showInterfaceCredentialsSuccessDlg
						else
							showInterfaceCredentialsErrorDlg
							return 0;
						fi
					else
						return 0;
					fi
				fi
			fi
		else
			showScanningForNetworksDlg;
			scanWLANNetworksFn $1
			showAvailableWLANDlg $SSID "${WNETWORKS[@]}"
			if [ $? -eq 0 ]; then
				IFS=" ";
				WNETWORK=(${WNETWORKS[$(($RETURN-1))]});
				
				if [ ${#WNETWORK[@]} -eq 2 ]; then
					PROTECTION=3;
				elif [ "${WNETWORK[2]}" == "WPA" ] || [ "${WNETWORK[2]}" == "WPA2" ]; then
					PROTECTION=1
				else
					PROTECTION=2;
				fi

				if [ "$SSID" != "$(echo "${WNETWORK[0]}" | awk '{print substr($0,2,length-2)}')" ]; then
					WLANKEY="";
					SSID=$(echo "${WNETWORK[0]}" | awk '{print substr($0,2,length-2)}');
				fi
				if [ $PROTECTION -lt 3 ]; then
					showInterfaceCredentialsDlg "$SSID" "$WLANKEY"
					if [ $? -eq 0 ]; then
						CREDENTIALS=($(echo -e "$RETURN"))
						if [ ${#CREDENTIALS[@]} -eq 2 ];then
							SSID=${CREDENTIALS[0]}
							WLANKEY=${CREDENTIALS[1]}
							if [ $PROTECTION -eq 1 ]; then
								setInterfaceWlanCredentials "$1" "WPA" "$SSID" "$WLANKEY"
							else
								setInterfaceWlanCredentials "$1" "WEP" "$SSID" "$WLANKEY"
							fi
							showInterfaceCredentialsSuccessDlg
						else
							showInterfaceCredentialsErrorDlg
							showWlanCredentialsGUIFn "$1" "$2"
							return 0;
						fi
						return 0;
					fi
				# Open network need only ssh, hence different dialog here
				else
					SSID=$(echo -e "$2" | grep SSID | cut -f 2 -d" ")
					showInterfaceSSIDDlg "$SSID"
					if [ $? -eq 0 ]; then
						if [ ! -z "$RETURN" ]; then
							setInterfaceWlanCredentials "$1" "Open" "$RETURN"
							showInterfaceCredentialsSuccessDlg
						else
							showInterfaceCredentialsErrorDlg
							return 0;
						fi
					else
						return 0;
					fi
				fi
			fi
		fi
	fi
}

# Executes the command line version of this module
# Arguments:
#  *
#    $1 Action [String]
#  list|status|dhcp|static|credentials
#    $2 Interface [String]
#  static
#    $3 IP [String]
#    $4 Gateway [String]
#    $5 Netmask [String]
#    $6 Nameserver 1 [String] (optional)
#    $7 Nameserver 2 [String] (optional)
#  credentials (No arguments return current settings)
#    $3 Encryption mode (WEP|WPA|Open) [string]
#    $4 ESSID
#    $5 WLANKEY (Only used for WEP|WPA)
# Returns:
#   0: Failure
#   1: Success
# Echoes:
#   @0: Error code, see below
#   @1: What the user asked for
# Error codes:
#  -1: Wrong number of arguments
#  -2: Invalid argument
#  -3: No interfaces available
#  -4: Invalid interface
#  -5: Interface not configured
function showCMDFn() {
	case $1 in
		list)
			IFACES=$(listNetworkInterfacesFn)
			if [ $? -eq 1 ] && [ ! -z "$IFACES" ]; then
				echo -e "$IFACES"
				return 1;
			else
				# No interfaces available
				echo "-3"
				return 0;
			fi
		;;
		status)
			# Check that we have 2 arguments ($1=action, $2=interface)
			if [ $# -eq 2 ]; then
				# No need to check for valid interface here as readNetworkConfigurationFn does it
				NETCONF=$(readNetworkConfigurationFn "$2")
				if [ $? -eq 1 ]; then
					if [ ! -z "$NETCONF" ]; then
						echo -e "$NETCONF"
						return 1;
					else
						echo "-5"
						return 0;
					fi
				else
					echo "-2"
					return 0;
				fi
			else
				# Wrong number of arguments
				echo "-1"
				return 0;
			fi
		;;
		dhcp)
			# Check that we have 3 arguments ($1=action, $2=interface)
			if [ $# -eq 2 ]; then
				isValidInterfaceFn "$2"
				if [ $? -eq 1 ]; then
					setInterfaceDhcpFn "$2"
					echo "1"
					return 1;
				else
					# Invalid interface
					echo "-2"
					return 0;
				fi
			else
				# Wrong number of arguments
				echo "-1"
				return 0;
			fi
		;;
		static)
			if [ $# -gt 3 ]; then
				isValidInterfaceFn "$2"
				if [ $? -eq 1 ]; then

					# $3 = IP
					# $4 = Gateway
					# $5 = Netmask
					# $6 = Nameserver1
					# $7 = Nameserver2

					# Handle optional name servers
					NAMESERVER1=""
					NAMESERVER2=""

					if [ $# -gt 5 ]; then
						NAMESERVER1="$6"
					fi
					if [ $# -gt 6 ]; then
						NAMESERVER2="$7"
					fi

					# Validation of arguments is done inside this function
					RESULT=$(setInterfaceStaticFn "$2" "$3" "$4" "$5" "$NAMESERVER1" "$NAMESERVER2")

					# Return status of setInterfaceModeFn
					echo "$RESULT"
					return $?;
				else
					# Invalid interface
					echo "-2"
					return 0;
				fi
			else
				# Wrong number of arguments
				echo "-1"
				return 0;
			fi
		;;
		credentials)
			if [ $# -gt 3 ]; then
				isValidInterfaceFn "$2"
				if [ $? -eq 1 ]; then
					# Validation of the data is done inside this function

					# $2 = Interface
					# $3 = WPA|WEP|Open
					# $4 = ESSID
					# $5 = WLANKEY (semi-optional, only needed with WPA or WEP)

					WLANKEY=""
					if [ $# -gt 4 ]; then
						WLANKEY="$5"
					fi

					RETURN=$(setInterfaceWlanCredentials "$2" "$3" "$4" "$WLANKEY")
					echo "$RETURN"
					return $?;
				else
					# Invalid interface
					echo "-2"
					return 0;
				fi
			else
				# Wrong number of arguments
				echo "-1"
				return 0;
			fi
		;;
		scan)
			if [ $# == 2 ]; then
				isValidInterfaceFn "$2"
				if [ $? -eq 1 ]; then
					scanWLANNetworksFn $2;
					IFS=$'\n';
					for WNETWORK in ${WNETWORKS[@]}; do
						IFS=" ";
						VALUES=($WNETWORK);
						NAME=$(echo ${VALUES[0]} | awk '{print substr($0,2,length-2)}');
						SECURITY=${VALUES[1]};
						
						if [ ${#VALUES[@]} -eq 2 ]; then
							TYPE="";
						else
							TYPE=${VALUES[2]}
						fi
						
						echo $NAME,$SECURITY,$TYPE;
					done
				else
					echo -2
				fi
			else
				echo -1
			fi
		;;
	esac
}
