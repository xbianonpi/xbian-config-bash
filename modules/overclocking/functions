#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Retrieve the current overclocking settings
# Returns
#  $CURRENTOC [Integer]
#  - -1 Custom overclock
#  - *  Array key of current overclock
#  $OCOLDSETTINGS [Array]
#  - 0 ARM Frequency
#  - 1 Core Frequency
#  - 2 SDRAM Frequency
#  - 3 Over voltage
function getCurrentOCSettingsFn() {
	OCOLDSETTINGS=();
	selectConfigVarFn "arm_freq"
	OCOLDSETTINGS[0]=$RETURN;
	selectConfigVarFn "core_freq"
	OCOLDSETTINGS[1]=$RETURN;
	selectConfigVarFn "sdram_freq"
	OCOLDSETTINGS[2]=$RETURN;
	selectConfigVarFn "over_voltage"
	OCOLDSETTINGS[3]=$RETURN;
	CURRENTOC=-1;
	NREMPTY=0;
	for KEY in ${!OCSETTINGS[@]}; do
		IFS=" ";
		SETTINGS=(${OCSETTINGS[$KEY]});
		I=0;
		for KEY1 in ${!SETTINGS[@]}; do
			if [ ! -z ${OCOLDSETTINGS[$KEY1]} ] && [ ${SETTINGS[$KEY1]} -eq ${OCOLDSETTINGS[$KEY1]} ]; then
				I=$(($I+1));
			fi
			if [ $I -eq ${#SETTINGS[@]} ]; then
				CURRENTOC=$KEY;
			fi
		done
	done
	X=0;
	DEFAULTVALUES=(${OCSETTINGS[0]});
	for KEY in ${!OCOLDSETTINGS[@]}; do
		if [ -z "${OCOLDSETTINGS[$KEY]}" ]; then
			X=$(($X+1));
			OCOLDSETTINGS[$KEY]=${DEFAULTVALUES[$KEY]};
		fi
	done;
	if [ $X -eq 4 ]; then
		CURRENTOC=0;
	fi
}

# Parse the overclock values in a menu structure
#  $1 [Integer] Current OC setting
# Returns
#  $OCMENU [Array]
#  - * Rows of the overclock menu
function createOCDLGMenuFn() {
	OCMENU=();
	for KEY in ${!OCSETTINGS[@]}; do
		IFS=" ";
		ROW=$(($KEY+1))","
		if [ ! -z $(echo "${OCDANGEROUS[*]}" | grep -o ${OCNAMES[$KEY]}) ]; then
			ROW+="\Z1";
			SAFE=-1;
		elif [ ! -z $(echo "${OCSAFE[*]}" | grep -o ${OCNAMES[$KEY]}) ]; then
			ROW+="\Z2";
			SAFE=0;
		else
			ROW+="\Zn";
			SAFE=1;
		fi
		ROW+="${OCNAMES[$KEY]}";
		SETTINGS=(${OCSETTINGS[$KEY]});
		I=0;
		for KEY1 in ${!SETTINGS[@]}; do
			I=$(($I+1));
			ROW+=",";
			if [ $SAFE -eq -1 ]; then
				ROW+="\Z1";
			elif [ $SAFE -eq 0 ]; then
				ROW+="\Z2";
			else
				ROW+="\Zn";
			fi
			ROW+=${SETTINGS[$KEY1]};
		done

		if [ $1 -eq $KEY ]; then
			ROW+=",on";
		else
			ROW+=",off";
		fi
		OCMENU+=($ROW);
	done
	STATUS="off"
	if [ $1 -eq -1 ]; then
		STATUS="on";
	fi
	if [ $CURRENTOC -eq -1 ]; then
		OCMENU+=($(($KEY+2)),"\Z1"$_OCCUSTOM,"\Z1"${OCOLDSETTINGS[0]},"\Z1"${OCOLDSETTINGS[1]},"\Z1"${OCOLDSETTINGS[2]},"\Z1"${OCOLDSETTINGS[3]},$STATUS)
	else
		OCMENU+=($(($KEY+2)),"\Z1"$_OCCUSTOM,"\Z1...","\Z1...","\Z1...","\Z1...",$STATUS)
	fi
	IFS=$ORIGINALIFS;
}

# Update the overclock settings to predefined values
# Returns
#  * [Integer]
#  - 1 Succes
#  - 0 Failed
function updateOCSettingsFn() {
	NEWOCSETTING=$1;
	IFS=" ";
	NEWOCVALUES=(${OCSETTINGS[$NEWOCSETTING]});
	NUMERIC=1
	for VALUES in ${NEWOCVALUES[@]}; do
		if ! [[ "$VALUES" =~ ^[0-9]+$ ]]; then
			NUMERIC=0
		fi
	done
	if [ $NUMERIC -eq 1 ]; then	
		updateConfigVarFn "arm_freq" ${NEWOCVALUES[0]};
		updateConfigVarFn "core_freq" ${NEWOCVALUES[1]};
		updateConfigVarFn "sdram_freq" ${NEWOCVALUES[2]};
		updateConfigVarFn "over_voltage" ${NEWOCVALUES[3]};
		IFS=$ORIGINALIFS;
		getCurrentOCSettingsFn

		if [ $CURRENTOC -eq $NEWOCSETTING ]; then
			return 1;
		else
			return 0;
		fi
	else
		return 2;
	fi
}

# Update the overclock settings to custom values
#  $1 [String] Space seperated values (ARM CORE SDRAM VOLTAGE)
# Returns
#  * [Integer]
#  - 1 Succes
#  - 0 Failed
function updateCustomOCSettingsFn() {
	NEWOCVALUES=($1);
	
	NUMERIC=1;
	for VALUES in ${NEWOCVALUES[@]}; do
		if ! [[ "$VALUES" =~ ^[0-9]+$ ]]; then
			NUMERIC=0
		fi
	done
	if [ $NUMERIC -eq 1 ]; then
		updateConfigVarFn "arm_freq" ${NEWOCVALUES[0]};
		updateConfigVarFn "core_freq" ${NEWOCVALUES[1]};
		updateConfigVarFn "sdram_freq" ${NEWOCVALUES[2]};
		updateConfigVarFn "over_voltage" ${NEWOCVALUES[3]};
		IFS=$ORIGINALIFS;
		getCurrentOCSettingsFn
		if [ "${OCOLDSETTINGS[*]}" == "${NEWOCVALUES[*]}" ]; then
			return 1;
		else
			return 0;
		fi
	else
		return 2;
	fi
}