#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Get list of installed services
function getInstalledServicesFn() {
	INSTSERV=();
	SERVLIST=($SERVICES);
	for SERVRAW in ${SERVLIST[@]}; do
		NAME=$(echo $SERVRAW | cut -f 1 -d:);
		FOUND=$(ls /etc/init.d/ | grep -io "^$NAME*");
		if [ ! -z "$FOUND" ]; then
			INSTSERV+=($NAME);
		fi
	done
}

function getServiceAutoStartStatusFn() {
	if [ ! -z "$1" ]; then
		return $(ls /etc/rc2.d/ | grep -io "S[0-9]\{1,\}$1" | wc -l);
	else
		return 0;
	fi
}

function getServiceRunningStatusFn() {
	SERVICE=$1;
	SERVCONF=$(echo -e "$SERVICES" | grep "^$SERVICE*");
	IFS=" ";
	DAEMONS=($(echo $SERVCONF | cut -f 2 -d: | sed -e 's/,/ /g'));
	RUNNING=0;
	if [ ${#DAEMONS[@]} -eq 0 ]; then
		if [ $(echo $PROCESSES | grep $SERVICE | wc -l) -ge 1 ]; then
			RUNNING=1;
		fi
	else
		for DAEMON in ${DAEMONS[@]}; do
			if [ $(echo $PROCESSES | grep $DAEMON | wc -l) -ge 1 ]; then
				RUNNING=$(($RUNNING+1));
			fi
		done
		if [ $RUNNING -eq ${#DAEMONS[@]} ]; then
			RUNNING=1;
		else
			RUNNING=0;
		fi
	fi
	IFS=$ORIGIGNALIFS;	
	return $RUNNING;
}

function getServiceNameFn() {
	IFS=$'\n';
	SERVCONF=($(echo -e "$SERVICES"));
	IFS=$ORIGINALIFS;
	I=0;
	for SERVRAW in ${SERVCONF[@]}; do
		SERV=$(echo $SERVRAW | cut -f 1 -d:);
		FOUND=$(ls /etc/init.d/ | grep -i "^$SERV*");
		if [ ! -z "$FOUND" ]; then
			if [ $I -eq $1 ]; then
				break;
			fi
			I=$(($I+1));
		fi 
	done
	NAME=$(ls -Al /etc/init.d/ | grep -m1 "$SERV" | awk '{print $9}');
}

function getServiceIDFn() {
	IFS=$'\n';
	SERVCONF=($(echo -e "$SERVICES"));
	IFS=$ORIGINALIFS;
	I=0;
	for SERVRAW in ${SERVCONF[@]}; do
		SERV=$(echo $SERVRAW | cut -f 1 -d:);
		FOUND=$(ls /etc/init.d/ | grep -i "^$SERV*");
		if [ ! -z "$FOUND" ]; then
			if [ "$FOUND" == "$1" ]; then
				break;
			fi
			I=$(($I+1));
		fi 
	done
	return $I;
}

function checkServiceExistsFn() {
	COMMAND="ls -Al /etc/init.d/ | awk '{print \$9}' | grep ^$1\$ | wc -l"
	if [ $(eval $COMMAND) -ge 1 ]; then
		return 1;
	else
		return 0;
	fi
}

function restartServiceFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		/etc/init.d/$NAME restart &>/dev/null
		RETURN=$?;
		X=0;
		while [ $(getServiceRunningStatusFn $NAME; echo $?) -eq 0 ] || [ $X -lt 10 ]; do
			sleep 1;
			PROCESSES=$(ps -A);
			X=$(($X+1));
		done;
		return $RETURN;
	else
		return -1;
	fi
}

function startServiceFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		/etc/init.d/$NAME start &>/dev/null
		RETURN=$?;
		X=0;
		while [ $(getServiceRunningStatusFn $NAME; echo $?) -eq 0 ] && [ $X -lt 10 ]; do
			sleep 1;
			PROCESSES=$(ps -A);
			X=$(($X+1));
		done;
		return $RETURN;
	else
		return 1;
	fi
}

function stopServiceFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		/etc/init.d/$NAME stop &>/dev/null
		RETURN=$?;
		X=0;
		while [ $(getServiceRunningStatusFn $NAME; echo $?) -eq 1 ] && [ $X -lt 10 ]; do
			sleep 1;
			PROCESSES=$(ps -A);
			X=$(($X+1));
		done;
		return $RETURN;
	else
		return 1;
	fi
}

function disableAutoStartFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then	
		update-rc.d $NAME remove &>/dev/null
		RETURN=$?;
		X=0;
		while [ $(getServiceAutoStartStatusFn $NAME; echo $?) -eq 1 ] && [ $X -lt 10 ]; do
			sleep 1;
			X=$(($X+1));
		done;
		if [ $X -eq 9 ]; then
			RETURN=0;
		fi
		return $RETURN;
	else
		return 1;
	fi
}

function enableAutoStartFn() {
	getServiceNameFn $1;
	if [ -f "/etc/init.d/$NAME" ]; then
		update-rc.d $NAME defaults &>/dev/null
		RETURN=$?;
		X=0;
		while [ $(getServiceAutoStartStatusFn $NAME; echo $?) -eq 0 ] && [ $X -lt 10 ]; do
			sleep 1;
			X=$(($X+1));
		done;
		if [ $X -eq 9 ]; then
			RETURN=0;
		fi
		return $RETURN;
	else
		return 1;
	fi
}

function getServiceConfFn() {
	DATA=();
	IFS=$'\n';
	SERVCONF=($(echo -e "$SERVICES"));
	IFS=$ORIGINALIFS;
	I=0;

	for SERVRAW in ${SERVCONF[@]}; do
		SERV=$(echo $SERVRAW | cut -f 1 -d:);
		FOUND=$(ls /etc/init.d/ | grep -i "^$SERV*");
		if [ ! -z "$FOUND" ]; then
			if [ $I -eq $1 ]; then
				DAEMONS=$(echo $SERVRAW | cut -f 2 -d:);
				DATA[0]=$SERV;
				DATA[1]=$DAEMONS;
				break;
			fi
			I=$(($I+1));
		fi 
	done
}

function updateServiceConfFn() {
	DATA=($2);
	if [ -f "$BASEPATH/config/services" ]; then
		eval "sed -i '/${DATA[0]}:/d' $BASEPATH/config/services";
	fi
	echo "${DATA[0]}:${DATA[1]}" >> $BASEPATH/config/services;
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep "${DATA[0]}:${DATA[1]}" | wc -l) -eq 1 ]; then
		return 1;
	else
		return 0;
	fi
}

function deleteServiceFn() {
	DATA=($2);
	if [ -f "$BASEPATH/config/services" ]; then
		eval "sed -i '/${DATA[0]}:/d' $BASEPATH/config/services";
	fi
	if [ -f "$BASEPATH/config/services" ] && [ $(cat $BASEPATH/config/services | grep "${DATA[0]}:" | wc -l) -eq 0 ]; then
		return 1;
	else
		return 0;
	fi
}