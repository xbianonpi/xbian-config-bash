#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

# The arguments this module accepts
ARGUMENTS=(list select status start restart stop autostart insert update delete);
if [ -f "$BASEPATH/config/services" ]; then
	SERVICES=$(cat $BASEPATH/config/services | sort);
else
	SERVICES="";
fi
PROCESSES=$(ps -A);

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

source $BASEPATH/modules/services/functions
source $BASEPATH/modules/services/dialogs

#|------------------------------------|
#|           Main program             |
#|------------------------------------|

# Executes the GUI version of this module
function showGUIFn() {
	PROCESSES=$(ps -A);
	showLoadingServiceDlg;
	getInstalledServicesFn;
	showServicesListDlg;
	if [ $? -eq 0 ]; then
		SERVICE=$(($RETURN-1));
		getServiceNameFn $SERVICE;
		if [ $RETURN -gt $(echo -e "$SERVICES" | wc -l) ] || [ -z "$(echo $SERVICES)" ]; then
			showServiceInsertDlg;
			if [ $? -eq 0 ]; then
				IFS=$'\n';
				DATA=($(echo -e "$VALUES"));
				IFS=$ORIGINALIFS;

				if [ ! -z "${DATA[0]}" ] && [ $(checkServiceExistsFn "${DATA[0]}"; echo $?) -eq 1 ]; then
					updateServiceConfFn $SERVICE "${DATA[*]}"
					if [ $? -eq 1 ]; then
						showServiceInsertedDlg;
						SERVICES=$(cat $BASEPATH/config/services | sort);
					else
						showErrorDlg;
					fi
					showGUIFn;
				else
					showServiceNotExistsDlg;
					showGUIFn;
				fi
			else
				showGUIFn;
			fi
		else
			showServiceManageDlg $SERVICE;
			if [ $? -eq 0 ]; then
				if [ $RETURN -eq 1 ]; then
					if [ $(getServiceAutoStartStatusFn $NAME; echo $?) -eq 1 ]; then
						showDisableAutoStartServiceDlg;
						disableAutoStartFn $SERVICE;
						RETURN=$?;
						if [ $RETURN -gt 0 ]; then
							showFailedToDisableAutoStartDlg;
						else
							showGUIFn;
						fi
					else
						showEnableAutoStartServiceDlg;
						enableAutoStartFn $SERVICE;
						RETURN=$?;
						if [ $RETURN -gt 0 ]; then
							showFailedToEnableAutoStartDlg;
						else
							showGUIFn;
						fi
					fi
				elif [ $RETURN -eq 2 ]; then
					if [ $(getServiceRunningStatusFn $NAME; echo $?) -eq 1 ]; then
						showRestartServiceDlg;
						restartServiceFn $SERVICE;
						RETURN=$?;
						if [ $RETURN -gt 0 ]; then
							showFailedToRestartDlg;
						else
							showGUIFn;
						fi
					else
						showStartServiceDlg;
						startServiceFn $SERVICE;
						RETURN=$?;
						if [ $RETURN -gt 0 ]; then
							showFailedToStartDlg;
						else
							showGUIFn;
						fi
					fi
				elif [ $RETURN -eq 3 ]; then
					getServiceConfFn $SERVICE;
					if [ $(getServiceRunningStatusFn $SERVICE; echo $?) -eq 1 ]; then
						showStopServiceDlg;
						stopServiceFn $SERVICE;
						RETURN=$?;
						if [ $RETURN -gt 0 ]; then
							showFailedToStopDlg;
						else
							showGUIFn;
						fi
					else
						showGUIFn;
					fi
				elif [ $RETURN -eq 4 ]; then
					getServiceConfFn $SERVICE;
					showServiceEditDlg "${DATA[*]}";
					if [ $? -eq 0 ]; then
						IFS=$'\n';
						DATA=($(echo -e "$VALUES"));
						IFS=$ORIGINALIFS;

						if [ ! -z "${DATA[0]}" ] && [ $(checkServiceExistsFn "${DATA[0]}"; echo $?) -eq 1 ]; then
							updateServiceConfFn $SERVICE "${DATA[*]}"
							if [ $? -eq 1 ]; then
								SERVICES=$(cat $BASEPATH/config/services | sort);
								showServiceUpdatedDlg;
							else
								showErrorDlg;
							fi
							showGUIFn;
						else
							showServiceNotExistsDlg;
							showGUIFn;
						fi
					else
						showGUIFn;
					fi
				elif [ $RETURN -eq 5 ]; then
					showServiceConfirmationDlg;
					if [ $? -eq 0 ]; then
						getServiceConfFn $SERVICE;
						deleteServiceFn $SERVICE "${DATA[*]}"
						if [ $? -eq 1 ]; then
							showServiceDeletedDlg;
							SERVICES=$(cat $BASEPATH/config/services | sort);
						else
							showErrorDlg;
						fi
						showGUIFn;
					else
						showGUIFn;
					fi
				fi
			else
				showGUIFn;
			fi
		fi
	fi
}

# Executes the command line version of this module
#  $1 Argument [String]
# status | select | start | stop | restart | autostart | insert | update | delete
#  $2 Service [String]
# autostart
#  $3 Action [String] Possible values 'enable' or 'disable'
# insert | update
#  $3 Daemons
# Returns
# -  4: Running but autostart disabled
# -  3: Not running but autostart enabled
# -  2: Not running and autostart disabled
# -  1: Success
# -  0: Failed
# - -1: Invalid number of arguments
# - -2: Service not available
# - -3: Service already running
# - -4: Service already stopped
# - -5: Autostart already enabled
# - -6: Autostart already disabled
# - -7: Service file does not exists
function showCMDFn() {
	case $1 in
		list)
			if [ $# -eq 1 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					for SERVICE in ${SERVICES[@]}; do
						NAME=$(echo $SERVICE | cut -f 1 -d:);
						if [ -f "/etc/init.d/$NAME" ]; then
							echo $NAME;
						fi
					done;
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		select)
			if [ $# -eq 2 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ]; then
						getServiceIDFn $2;
						KEY=$?;
						getServiceConfFn $KEY;
						echo ${DATA[1]/,/ };
					else
						echo -2;
					fi
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		status)
			if [ $# -eq 2 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ]; then
						RUNNING=$(getServiceRunningStatusFn $2; echo $?);
						AUTOSTART=$(getServiceAutoStartStatusFn $2; echo $?);
						if [ $RUNNING -eq 0 ] && [ $AUTOSTART -eq 0 ]; then
							echo $2 2;
						elif [ $RUNNING -eq 0 ] && [ $AUTOSTART -eq 1 ]; then
							echo $2 3;
						elif [ $RUNNING -eq 1 ] && [ $AUTOSTART -eq 0 ]; then
							echo $2 4;
						elif [ $RUNNING -eq 1 ] && [ $AUTOSTART -eq 1 ]; then
							echo $2 5;
						fi
					else
						echo -2;
					fi
				else
					echo -7;
				fi
			elif [ $# -eq 1 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					for SERVICE in ${SERVICES[@]}; do
						NAME=$(echo $SERVICE | cut -f 1 -d:);
						RUNNING=$(getServiceRunningStatusFn $NAME; echo $?);
						AUTOSTART=$(getServiceAutoStartStatusFn $NAME; echo $?);
						if [ $RUNNING -eq 0 ] && [ $AUTOSTART -eq 0 ]; then
							echo $NAME 2;
						elif [ $RUNNING -eq 0 ] && [ $AUTOSTART -eq 1 ]; then
							echo $NAME 3;
						elif [ $RUNNING -eq 1 ] && [ $AUTOSTART -eq 0 ]; then
							echo $NAME 4;
						elif [ $RUNNING -eq 1 ] && [ $AUTOSTART -eq 1 ]; then
							echo $NAME 5;
						fi
					done;
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		start)
			if [ $# -eq 2 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ] && [ -f "/etc/init.d/$2" ]; then
						if [ $(getServiceRunningStatusFn $2; echo $?) -eq 0 ]; then
							ID=$(getServiceIDFn $2; echo $?);
							startServiceFn $ID;
							RETURN=$?;
							if [ $RETURN -gt 0 ]; then
								echo 0;
							else
								echo 1;
							fi;
						else
							echo -3
						fi
					else
						echo -2
					fi
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		stop)
			if [ $# -eq 2 ]; then		
				if [ -f "$BASEPATH/config/services" ]; then
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ] && [ -f "/etc/init.d/$2" ]; then
						if [ $(getServiceRunningStatusFn $2; echo $?) -eq 1 ]; then
							ID=$(getServiceIDFn $2; echo $?);
							stopServiceFn $ID;
							RETURN=$?;
							if [ $RETURN -gt 0 ]; then
								echo 0;
							else
								echo 1;
							fi;
						else
							echo -4
						fi
					else
						echo -2
					fi
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		restart)
			if [ $# -eq 2 ]; then	
				if [ -f "$BASEPATH/config/services" ]; then	
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ] && [ -f "/etc/init.d/$2" ]; then
						if [ $(getServiceRunningStatusFn $2; echo $?) -eq 1 ]; then
							ID=$(getServiceIDFn $2; echo $?);
							restartServiceFn $ID;
							RETURN=$?;
							if [ $RETURN -gt 0 ]; then
								echo 0;
							else
								echo 1;
							fi;
						else
							echo -4
						fi
					else
						echo -2
					fi
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		autostart)
			if [ $# -eq 3 ]; then
				if [ -f "$BASEPATH/config/services" ]; then
					if [ $(echo -e "$SERVICES" | grep -o "^$2" | wc -l) -ge 1 ] && [ -f "/etc/init.d/$2" ]; then
						if [ $3 == "disable" ]; then
							if [ $(getServiceAutoStartStatusFn $2; echo $?) -eq 1 ]; then
								ID=$(getServiceIDFn $2; echo $?);
								disableAutoStartFn $ID;
								RETURN=$?;
								if [ $RETURN -gt 0 ]; then
									echo 0;
								else
									echo 1;
								fi
							else
								echo -5;
							fi
						elif [ $3 == "enable" ]; then
							if [ $(getServiceAutoStartStatusFn $2; echo $?) -eq 0 ]; then
								ID=$(getServiceIDFn $2; echo $?);
								enableAutoStartFn $ID;
								RETURN=$?;
								if [ $RETURN -gt 0 ]; then
									echo 0;
								else
									echo 1;
								fi
							else
								echo -6;
							fi
						else
							echo -1;
						fi
					else
						echo -2
					fi
				else
					echo -7;
				fi
			else
				echo -1;
			fi
		;;
		insert | update)
			if [ $# -ge 2 ]; then
				DATA=($2)
				shift;
				shift;
				if [ ! -z "${DATA[0]}" ] && [ $(checkServiceExistsFn "${DATA[0]}"; echo $?) -eq 1 ]; then
					DAEMONS=($@);
					DAEMON=""
					ID=$(getServiceIDFn $2; echo $?);
					for VALUE in ${DAEMONS[@]}; do
						DAEMON=$DAEMON$VALUE",";
					done;
					DAEMON=$(echo $DAEMON | awk '{print substr($0,0,length)}');
					DATA+=($DAEMON);
					updateServiceConfFn $ID "${DATA[*]}"
					if [ $? -eq 1 ]; then
						echo 1
					else
						echo 0
					fi
				else
					echo -2
				fi
			else
				echo -1;
			fi
		;;
		delete)
		if [ $# -eq 2 ]; then
			DATA=($2)
			shift;
			if [ $(echo -e "$SERVICES" | grep -o "^$1" | wc -l) -ge 1 ]; then
				ID=$(getServiceIDFn $2; echo $?);
				deleteServiceFn $ID "${DATA[*]}"
				if [ $? -eq 1 ]; then
					echo 1
				else
					echo 0
				fi
			else
				echo -2
			fi
		else
			echo -1;
		fi
		;;		
	esac
}
