#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>
#

function updateAptMirrorsFn() {
	if [ $(wget --spider http://apt.xbian.org/mirror.txt >/dev/null 1>/dev/null 2>/dev/null; echo $?) -eq 0 ]; then
		URL=$APTBASE"mirror.txt"
		wget -O - "$URL" > $BASEPATH/config/aptmirror 2>/dev/null
		return 1;
	else
		return 0;
	fi
	
}

function localPackageDBOutdatedFn() {
	if [ -f "/var/lib/apt/periodic/update-success-stamp" ]; then
		if [ $(find /var/lib/apt/periodic/update-success-stamp -mtime +7 | wc -l) -gt 0 ]; then
			if [ -f "$BASEPATH/config/pkglist" ] && [ -f "/var/lib/apt/lists/apt.xbian.org*Packages" ]; then
				if [ "$(md5sum /var/lib/apt/lists/apt.xbian.org*Packages | awk '{print $1}')" == "$(md5sum $BASEPATH/config/pkglist | awk '{print $1}')" ]; then
					return 0;
				else
					return 1;
				fi
			else
				return 1;
			fi
		else
			return 0;
		fi
	else
		return 1;
	fi
}

function downloadPackageListFn() {
	RETURN=0;
	if [ -f "$BASEPATH/config/aptmirror" ]; then
		IFS=$'\n';
		MIRRORS=($(cat $BASEPATH/config/aptmirror));
		for MIRROR in ${MIRRORS[@]}; do
			URL=$MIRROR"/dists/wheezy/main/binary-armhf/Packages"
			if [ $(wget --spider $URL >/dev/null 1>/dev/null 2>/dev/null; echo $?) -eq 0 ]; then
				wget -O - $URL > $BASEPATH/config/pkglist 2>/dev/null
				RETURN=1;
				break;
			fi
		done
		IFS=$ORIGINALIFS;
	fi
	return $RETURN;
}

#Retrieves the package version
# $1: Full name of the package
function getPackageVersionFn() {
	dpkg-query -W -f='${Version}\n' "$1" 2>/dev/null
}

function updateAptFn() {
	apt-get update &>/tmp/aptstatus
	if [ $? -eq 0 ]; then
		return 1;
	else
		return 0;
	fi
}

function getAllPackagesForInstallFn() {
	ALLPACKAGES=$(cat /tmp/aptstatus | awk '/upgraded:/ {flag=1;next} /upgraded/{flag=0} flag{print}' | sed 's/ *$//g' | sed 's/^ *//g' | sed ':a;N;$!ba;s/\n/ /g');
}

function getAptErrorCodeFn() {
	if [ $(cat /tmp/aptstatus | grep "already the newest version" | wc -l) -eq 1 ]; then
		return 1;
	elif [ $(cat /tmp/aptstatus | grep "was not found" | wc -l) -eq 1 ]; then
		return 2;
	elif [ $(cat /tmp/aptstatus | grep "Unable to locate package" | wc -l) -eq 1 ]; then
		return 3;
	elif [ $(cat /tmp/aptstatus | grep "DOWNGRADED" | wc -l) -eq 1 ]; then
		return 4;
	elif [ $(cat /tmp/aptstatus | grep -i "size mismatch" | wc -l) -eq 1 ]; then
		return 5;
	elif [ $(cat /tmp/aptstatus | grep -i "returned an error code" | wc -l) -eq 1 ]; then
		return 6;
	elif [ $(cat /tmp/aptstatus | grep -i "impossible situation" | wc -l) -eq 1 ]; then
		return 6;
	else
		return 0;
	fi
}