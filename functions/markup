#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# Wrap text fit in dialog width
#  $1 [String]	Text
#  $2 [Integer] 	Width (optional) 
# Returns
#  $HEIGHT [Integer]		Needed height for the dialog
#  $WRAPPEDTEXT [String]	String wrapped in newlines to fit width
function wrapTxtFn() {
	TEXT=$1;
	
	if [ $# -gt 1 ]; then
		WIDTH=$2;
	else
		WIDTH=$DEFAULTWIDTH;
	fi
	IFS=" ";
	WORDS=($(echo $TEXT));
	RAWLINES=();	
	LINES=();
	IFS=$'\n';
	for WORD in ${WORDS[@]}; do
		if [ $((${#RAWLINES}+${#WORD})) -lt $(($WIDTH-10)) ]; then
			RAWLINES+=$WORD" ";
		else
			RAWLINES+=$WORD" ";
			LINES+=($(echo $RAWLINES | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'));
			RAWLINES="";
		fi
	done;
	LINES+=($RAWLINES);
	RAWLINES="";
	WRAPPEDTXT="\n";
	HEIGHT=6;
	for LINE in ${LINES[@]}; do
		HEIGHT=$(($HEIGHT+1));
		WRAPPEDTXT+=$LINE"\n";
	done
	IFS=$ORIGINALIFS;
	return $HEIGHT;
}

# Centers text in predefined width
#  $1 [String]	Text
#  $2 [Integer] Width (optional)
# Returns
#  $CENTEREDTXT [String]
function centerTxtFn() {
	TEXT=$1;
	IFS=$'\n';
	if [ $# -gt 1 ]; then
		WIDTH=$2;
	else
		WIDTH=$DEFAULTWIDTH;
	fi
	LINES=($(echo -e "$TEXT"));

	CENTEREDTXT="";
	for LINE in ${LINES[@]}; do
		NRSPACES=$(($(($WIDTH-6))-$((${#LINE}))));
		for (( c=0; c<=$(($NRSPACES/2)); c++ )); do
			CENTEREDTXT+=" ";
		done;
		CENTEREDTXT+=$LINE;
	done;
}

function valignTxtFn() {
	TEXT=$1;
	IFS=$'\n';
	if [ $# -gt 1 ]; then
		HEIGHT=$2;
	else
		HEIGHT=$DEFAULTHEIGHT;
	fi	
	
	LINES=($(echo -e "$TEXT"));
	ALIGNEDTXT="\n";
	for (( c=0; c<=$(($(($HEIGHT/2))-4-${#LINES[@]})); c++ )); do
		ALIGNEDTXT+="\n";
	done;
	ALIGNEDTXT+=$TEXT;
}

# Trim trailing and leading spaces from line
#  $1 [String]	Line
# Returns
#  $TRIMMEDLN [String]
function trimLnFn() {
	TRIMMEDLN=$(echo -e "$1" | sed 's/^\ //;s/\ $//');
}

function createTableRowFn() {
	TYPE=$1;
	shift;
	NRCOLUMNS=$#;
	NEWROW=""
	for (( c=1; c<=$NRCOLUMNS; c++ )); do
		NEWROW+="$1"
		if [ $c -eq 1 ]; then
			NEWROW+="%";
		elif [ $NRCOLUMNS -gt $c ]; then
			if [ $TYPE == "radio" ] && [ $NRCOLUMNS -gt $(($c+1)) ]; then
				NEWROW+="!"
			else
				NEWROW+="%"
			fi
		else
			NEWROW+="%"
		fi
		shift;
	done;
}

function createTableHeaderFn() {
	#Check for similar number of columns between rows
	TYPE=$1;
	shift;
	HEADER=""
	IFS="%";
	TBLROWS=($1)
	
	NEWTBLROWS=();
	NEWTBLROW="";
	I=0;
	for TBLROW in ${TBLROWS[@]}; do
		I=$(($I+1));
		if [ $I -eq 2 ]; then
			NEWTBLROW+=$TBLROW;
			NEWTBLROWS+=($NEWTBLROW);
		elif [ $I -eq 3 ]; then
			NEWTBLROW="";
			I=0;
		else
			NEWTBLROW+="$TBLROW!";
		fi
	done;

	NRCOLUMNS=0;
	WORDLENGTH=();
	for (( c=0; c<${#NEWTBLROWS[@]}; c++ )); do
		IFS="!";
		TBLROW=(${NEWTBLROWS[$c]});
		
		NRCOLUMNS=${#TBLROW[@]};
		for (( d=0; d<${#TBLROW[@]}; d++ )); do
			if [ $c -eq 0 ]; then
				WORDLENGTH+=(${#TBLROW[$d]});
			elif [ ${WORDLENGTH[$d]} -lt ${#TBLROW[$d]} ]; then
				WORDLENGTH[$d]=${#TBLROW[$d]}
			fi
		done
	done
	IFS=$ORIGINALIFS;
	HEADER=" "
	
	if [ $TYPE == "radio" ]; then
		NRCOLUMNS=$(($NRCOLUMNS-1));
	fi
	
	HEADER+=$2;
	HEADER+="  ";
	shift
	
	for (( c=1; c<=$NRCOLUMNS; c++ )); do
		HEADER+=$2;
		for (( d=0; d<=$((${WORDLENGTH[$c]}-${#2})); d++ )); do
			HEADER+=" ";
		done
		shift;
	done
}


function createTableFn() {
	TYPE=$1
	shift
	OLDHEADER=$1;
	shift;
	OLDROWS=($@);
	ROWS="";
<<<<<<< HEAD
	for (( c=0; c<${#OLDROWS[@]}; c++ )); do
		IFS=",";
		OLDROW=(${OLDROWS[$c]});
		NRCOLUMNS=${#OLDROW[@]};
		for (( d=0; d<${#OLDROW[@]}; d++ )); do
			LENGTH=$((${WORDLENGTH[$d]}-${#OLDROW[$d]}));
			if [ $d -gt 0 ] && [ $d -lt $((${#OLDROW[@]}-1)) ]; then
				if [ $d -gt 1 ]; then
					ROWS+="$DEFAULTCOLSEP"
				fi
				ROWS+="\Z0[ ";
				if [ ${CENTERED[$d]} -eq 1 ]; then					
					for (( e=0; e<$(($LENGTH/2)); e++ )); do
						ROWS+=" ";
					done
					ROWS+=${OLDROW[$d]};
					for (( e=0; e<$(($LENGTH/2)); e++ )); do
						ROWS+=" ";
					done
					
					if ! [ $(($e+$e)) -eq $LENGTH ]; then
						ROWS+=" ";
					fi;
				else
					ROWS+=${OLDROW[$d]};
					for (( e=0; e<$LENGTH; e++ )); do
						ROWS+=" ";
					done
				fi
					
				ROWS+=" \Z0]";
			elif [ $d -gt 0 ]; then
				ROWS+="$DEFAULTDELIMITER"${OLDROW[$d]}"$DEFAULTDELIMITER";
			else
				ROWS+=${OLDROW[$d]}"$DEFAULTDELIMITER";
			fi
		done
=======
	for OLDROW in ${OLDROWS[@]}; do
		IFS=","
		ROW1=($OLDROW)
		createTableRowFn $TYPE ${ROW1[@]};
		ROWS+=$NEWROW;
		
>>>>>>> parent of c57175b... Perfectionized table creator
	done
	ROWS=$(echo $ROWS | awk '{print substr($0,0,length)'});
	
	IFS=","
	NEWHEADER=($OLDHEADER);
	createTableHeaderFn $TYPE $ROWS ${NEWHEADER[@]};
}